% rgp_introduction.Rnw

\documentclass[a4paper, twoside]{tufte-handout}
\setcounter{secnumdepth}{2} % enable section numbers

\usepackage[english]{babel}
\renewcommand{\figurename}{Fig.}
\usepackage{amsmath,amssymb}
\usepackage[pdftex]{graphicx}
  \graphicspath{{figures/}}
\usepackage{xcolor}
\usepackage[intoc]{nomencl}
\usepackage{xspace}
\usepackage{booktabs}
\usepackage{url}
\usepackage{lipsum}
\usepackage{natbib}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fancyvrb}
  \fvset{fontsize=\normalsize}
\usepackage{mathpazo}
% To install the URW Classico (Optima) Fonts in TeX Live,
% run "getnonfreefonts-sys classico" as root
\renewcommand*\sfdefault{uop}
\def\cad{{\sc CAD}\xspace}
\def\cfd{{\sc CFD}\xspace}
\def\clang{{\sf C}\xspace}
\def\dakota{{\sf DAKOTA}\xspace}
\def\doe{{\sc DoE}\xspace}
\def\finitestar{{\it finite}*\xspace}
\def\gp{{\sc GP}\xspace}
\def\linux{{\sf Linux}\xspace}
\def\mpi{{\sf MPI}\xspace}
\def\opencascade{{\sf OpenCASCADE}\xspace}
\def\openfoam{{\sf OpenFOAM}\xspace}
\def\openmpi{{\sf Open MPI}\xspace}
\def\paraview{{\sf ParaView}\xspace}
\def\python{{\sf Python}\xspace}
\def\rlang{{\sf R}\xspace}
\def\rgp{{\sf RGP}\xspace}
\def\rproject{{\sf R Project}\xspace}
\def\rsymbolic{{\sf rsymbolic}\xspace}
\def\slurm{{\sf SLURM}\xspace}
\def\spot{{\sf SPOT}\xspace}
\def\spotseven{{\sf SPOTSeven}\xspace}
\definecolor{linkcol}{rgb}{0, 0, 0} 
\definecolor{citecol}{rgb}{0, 0, 0}
\hypersetup{
  bookmarksopen = true,
  pdftitle = finitestar
  pdfauthor = Oliver Flasch and Baris Ayaz,
  colorlinks = true,
  linkcolor = linkcol,
  citecolor = citecol,
  urlcolor = linkcol}
\title[RGP Introduction]{A Friendly Introduction to RGP}
\date{4 March 2013 (RGP release 0.3-1)}
\author[Oliver Flasch]{Oliver Flasch}


\begin{document}

\maketitle

\begin{abstract}
  \noindent \rgp is genetic programming system based on, as well as fully
  integrated into, the \rlang environment. The system implements classical
  tree-based genetic programming as well as other variants including, for
  example, strongly typed genetic programming and Pareto genetic programming.
  It strives for high modularity through a consistent architecture that allows
  the customization and replacement of every algorithm component, while
  maintaining accessibility for new users by adhering to the "convention over
  configuration" principle. Performance critical sections have efficient
  implementations in \clang, making the system suitable for real-world
  application. Typical \gp applications are supported by well-known \rlang
  ideoms. For example, symbolic regression via \gp is supported by the same
  "formula interface" as linear regression in \rlang.
\end{abstract}


\begin{marginfigure}[-11.3cm]
  \centering
  \includegraphics[width=.75\linewidth]{skel/vignettes/figures/logo_rgp.pdf}
  \setfloatalignment{t}
\end{marginfigure}

This paper provides a friendly introduction to \rgp, a flexible system for
genetic programming (\gp) in the \rlang environment for statistical
computing. After section~\ref{sec:applications} sets the stage with typical 
applications of \gp in general and \rgp in particular,
section~\ref{sec:features} outlines the range and depth of \rgp's features.
\rgp is a large package that can be daunting for the first-time user. To 
help getting started, section~\ref{sec:tutorials} provides a set of hands-on
tutorials, beginning with simple tasks, including getting \rgp up and running
in an existing \rlang installation, up to advanced topics like strongly typed
genetic programming. The outlook in section~\ref{sec:outlook} gives hints on
where to go from here, including references to \gp literature as well as
\rgp's comprehensive online documentation and web resources. 


\section{Application Areas}\label{sec:applications}
\finitestar is an integrated system of hard- and software that enables the rapid and reliable
solution of complex tasks in engineering optimization, including design and process analysis.
\finitestar provides statistically validated answers and decision support to engineering and
TODO A non-exhaustive list of \rgp-applications include:
\begin{itemize}
\item {\em Symbolic regression:} TODO Which parameters of an industrial process or product design
have the strongest effect on operating costs, quality, energy efficiency, or pollutant emissions?
\item {\em Feature selection:} TODO What relations exist between process parameters and target
quantities such as quality, costs, and efficiency?
\item {\em Automatic programming:} TODO Are these relations causal connections or just accidental
correlations? Are correlations statistically significant? How can these relations be utilized
for process optimization?
\item {\em General expression search:} TODO antenna design etc, Which setting of process or design parameters
provides an optimal compromise between operating costs, quality, energy efficiency, pollutant
emissions, and process stability?
\end{itemize}


\begin{marginfigure}
  \includegraphics[width=1\linewidth]{skel/vignettes/figures/do_arith_trig_1.pdf}
  \caption{Symbolic regression of the governing law of a damped oscillator:
  \rgp enables symbolic regression via genetic programming. This example shows
  how \rgp is used to find the governing physical law of a damped oscillator.
  In contrast to other regression methods, the solution is expressed as a
  mathematical formula accessible to human interpretation and validation. In
  this figure, the true oscillator law and behaviour are shown in dotted red,
  the solution found by \rgp is shown in solid black.}
  \label{fig:oscillator}
  \setfloatalignment{t}
\end{marginfigure}


\section{Features}\label{sec:features}
To provide answers to the questions posed in the last section, \finitestar assembles and automates
best-of-breed hard- and software to form the integrated optimization process shown in
figure~\ref{fig:process}.

\begin{figure}[h]
  \centering
  %\includegraphics[width=0.8\linewidth]{figures/finitestar_optimization_loop.pdf}
  \caption{Integrated optimization process: \finitestar assembles best-of-breed hard- and software
  to form a full-stack optimization process. Multiple industry- and application-specific presets
  provide a head-start for the otherwise complex task of optimization problem setup.}
  \label{fig:process}
  \setfloatalignment{t}
\end{figure}

\newthought{Each} step is implemented by Open Source software, providing maximum
flexibility, while \finitestar's release policy, integration layer, and web-based user interface
provide high stability and usability:
\begin{enumerate}
\item {\em Statistical Analysis / \doe:} Statistical analysis of prior experimental and simulation
results is provided by the \rproject and \spot.
\item {\em Parametric \cad:} Bi-directional interfaces to \cad systems as well as parametric
design evolution is provided by the \opencascade kernel.
\item {\em Multipyhics simulation:} Accurate simulation of multiple physical phenomena is provided by
\openfoam.
\item {\em Surrogate modelling:} Response surface modelling for efficient analysis and optimization
based on experimental and simulation data is provided by \dakota.
\item {\em Multiobjective optimization:} Concurrent optimization of multiple criteria under
constraints is provided by \dakota and \spot.
\item {\em Postprocessing:} Result visualization and report generation is handled by \paraview.
\end{enumerate}

\newthought{As} each step of this process has to be adjusted to the analysis or optimization
task at hand, \finitestar offers multiple industry- and application-specific preset modules.
These presets provide a head-start for the otherwise complex task of optimization problem setup.


\section{Tutorials}\label{sec:tutorials}
\finitestar comes as a turn-key appliance ready for rapid deployment into existing
IT infrastructure. As the system is highly scalable with parallel execution on the layer
of optimization tasks as well as on the layer of individual simulations, the appliance
is available in multiple sizes. Depending on problem complexity and response time
requirements, \finitestar comes in form of a virtual machine image, a desk-side server,
a rack-server, or a rack-based compute cluster with high-performance interconnect. All
hardware appliances are based on current-generation Dell servers and are running a
\linux software stack.

\begin{figure}[h]
  \centering
  %\includegraphics[width=0.9\linewidth]{figures/finitestar_hardware_transparent_1000x722.png}
  \caption{\finitestar appliance: The \finitestar package comes as a turn-key appliance ready for
  fast integration into existing IT infrastructure. Depending on problem complexity and
  response time requirements, the appliance is available as a virtual machine image, a desk-side 
  server, a rack-server, or a rack-based compute cluster with high-performance
  interconnect. All hardware appliances are based on current-generation
  Dell servers and are running a \linux software stack.} 
  \label{fig:finitestar_appliance}
  \setfloatalignment{t}
\end{figure}

\newthought{An} Open Source \python-based integration layer with a highly interactive
web-based user interface ties all system components together and also controls "hidden"
infrastructure components such as user- and job-management, the resource manager (\slurm),
and the \mpi software stack (\openmpi).


\section{Outlook}\label{sec:outlook}
TODO add an outlook section


\section*{Imprint}
\begin{minipage}[t]{\linewidth}
Oliver Flasch\\
\spotseven group / \rsymbolic project\\
Cologne University of Applied Sciences\\
Steinm√ºllerallee 1\\
51643 Gummersbach\\
Germany\\
Web: \url{rsymbolic.org}\\
Email: {\tt oliver.flasch@fh-koeln.de}\\
\vspace{0.5cm}
\small{\copyright~2010-13 \rsymbolic project}\\
\small{All other trademarks and copyrights are\\
the property of their respective owners.}
\end{minipage}


%\bibliographystyle{plainnat}
%\bibliography{finitestar}

\end{document}
